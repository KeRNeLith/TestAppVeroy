version: '0.0.{build}'
image: Visual Studio 2019

# Setup
nuget:
  disable_publish_on_pr: true

pull_requests:
  do_not_increment_build_number: true

branches:
  except:
    - /tmp|temp/

environment:
  #VSINSTALLDIR: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community"
  #VisualStudioVersion: 16.0
  SONARQUBE_TOKEN:
    secure: MTBDDF4aTiFIZFcSrOBkcmtDQnZiHx7R+Zozs8FXmpEXHt0ckiPqET8o7vj6LMBN
  DocFXVersion: 2.51
  NUnitConsoleVersion: 3.8.0
  OpenCoverVersion: 4.6.519
  CoverallsVersion: 1.0.0
  COVERALLS_REPO_TOKEN:
    secure: v31ShF3jpWCFELwt8iDTmUiKNB/5wZWMqy1EsCK/8LnT73kMlPjiK0ZL1rqIMjeo
  GITHUB_ACCESS_TOKEN:
    secure: fLTTmcGOM55kigJC4vErpObFmybCtzQtwb4QN55BTNq3GDGaOCoHDoIPxexzO59d
  GITHUB_EMAIL:
    secure: wcfqCHOmeRLZf/BX6u6qQSV89Q4jFs9fHNDgMpKAcqE=

# Setup build version
init:
- ps: >-
    "APPVEYOR_BUILD_ID: $env:APPVEYOR_BUILD_ID";
    "APPVEYOR_BUILD_VERSION: $env:APPVEYOR_BUILD_VERSION";
    "APPVEYOR_PULL_REQUEST_NUMBER: $env:APPVEYOR_PULL_REQUEST_NUMBER ";
    
    if ($env:APPVEYOR_REPO_TAG -eq "true")
    {
        $env:Build_Version = "$($env:APPVEYOR_REPO_TAG_NAME.Replace('v', ''))";
        $env:Build_Assembly_Version = $env:Build_Version;
    }
    else
    {
        $env:Build_Version = "$($env:APPVEYOR_BUILD_VERSION)";
        $env:Build_Assembly_Version = "$env:Build_Version" -replace "\-.*","";
        $env:IsFullIntegrationBuild = "$env:APPVEYOR_PULL_REQUEST_NUMBER" -eq "" -And $env:Configuration -eq "Release";
    }
    
    $env:MyVar = $true;
    $env:MyVar2 = $false;
    if ($env:MyVar -eq $true)
    {
        "MyVar is true"; 
    }
    else
    {
        "MyVar is false";
    }
    if ($env:MyVar2 -eq $true)
    {
        "MyVar2 is true"; 
    }
    else
    {
        "MyVar2 is false";
    }
    
    
    "Build_Version: $env:Build_Version";
    "Build_Assembly_Version: $env:Build_Assembly_Version";
    "Integ build: $env:IsFullIntegrationBuild";


# Assembly infos & csproj patching
assembly_info:
  patch: true
  file: '**\\AssemblyInfo.*'
  assembly_version: '$(Build_Assembly_Version)'
  assembly_file_version: '$(Build_Version)'
  assembly_informational_version: '$(Build_Version)'

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '$(Build_Version)'
  package_version: '$(Build_Version)'
  assembly_version: '$(Build_Assembly_Version)'
  file_version: '$(Build_Version)'
  informational_version: '$(Build_Version)'

# Build configurations
platform:
  - Any CPU

configuration:
#  - Debug
  - Release

matrix:
  fast_finish: true

# Build
before_build:
# SonarQube
  - ps: dotnet tool install --tool-path tools dotnet-sonarscanner
  - ps: $sonarscanner = (Resolve-Path "tools\dotnet-sonarscanner.exe").ToString()
# NuGet restore
  - nuget restore

build:
  verbosity: normal

build_script:
  - ps: >-
      if ($env:IsFullIntegrationBuild -eq $true)
      {
         & $sonarscanner begin /k:"tests_project" /o:"kernelith-github" /d:sonar.host.url="https://sonarcloud.io" /d:"sonar.branch.name=$env:APPVEYOR_REPO_BRANCH" /d:sonar.cs.opencover.reportsPaths="coverage.xml" /d:sonar.login="$env:SONARQUBE_TOKEN" /d:sonar.coverage.exclusions=Annotations.cs
      }
  - msbuild

before_test:
# NuGet packages for coverage
  - ps: nuget install NUnit.Console -Version $env:NUnitConsoleVersion -OutputDirectory tools
  - ps: nuget install OpenCover -Version $env:OpenCoverVersion -OutputDirectory tools
# Dot net tool for coverage
  - ps: dotnet tool install --tool-path tools --version $env:CoverallsVersion coveralls.net

test_script:
  - ps: >-
      $nunitFolder = (Resolve-Path "tools\NUnit.ConsoleRunner.*\tools").ToString();
      $nunitConsole = (Resolve-Path "$nunitFolder\nunit3-console.exe").ToString();
      
      # Only take test assemblies matching their folder name
      # Example:
      # Directory = tests\TestProject.Tests\bin\CONFIGURATION\TARGET
      # Directory.Parent = tests\TestProject.Tests\bin\CONFIGURATION
      # Directory.Parent.Parent = tests\TestProject.Tests\bin
      # Directory.Parent.Parent.Parent = tests\TestProject.Tests
      
      $testAssemblies = (ls src\*.Tests\bin\$env:Configuration\net461\*Tests.dll | Where-Object { $_ -Match "net*" -and $_ -NotMatch "netcoreapp*" -and [System.IO.Path]::GetFileNameWithoutExtension($_.FullName) -Match $_.Directory.Parent.Parent.Parent.Name } | % FullName | sort-object -Unique);
      $allTestsCompleted = $false;
      $opencover = (Resolve-Path "tools\OpenCover.*\tools\OpenCover.Console.exe").ToString();
      $coveralls = (Resolve-Path "tools\csmacnz.Coveralls.exe").ToString();
      
      & $opencover -register:Path64 -filter:"+[*]* -[*.Test*]* -[*]JetBrains.Annotations*" -target:"$nunitConsole" -targetargs:"$testAssemblies --result=\`"TestResult.xml\`"" -returntargetcode -log:Warn -output:coverage.xml;
      $allTestsCompleted = $?;
      & $sonarScanner end /d:"sonar.login=$env:SONARQUBE_TOKEN"
      # Upload results to AppVeyor
      
      $wc = New-Object 'System.Net.WebClient';
      $wc.UploadFile("https://ci.appveyor.com/api/testresults/nunit3/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestResult.xml));
      
      if (!$allTestsCompleted)
      {
          throw "Unit tests failed";
      }

after_test:
  - ps: ./build/package.ps1

# Artifact
artifacts:  
  - path: '**\bin\Release\*.nupkg'
    name: NuGet
  - path: '**\bin\Release\**\*.zip'
    name: Samples

before_deploy:
  - ps: ./build/releaseDoc.ps1

deploy:
# MyGet
  - provider: NuGet
    server: https://www.myget.org/F/kernelith-ci/api/v2/package
    symbol_server: https://www.myget.org/F/kernelith-ci/symbols/api/v2/package
    api_key:
      secure: ANF+joC2B+NahxCFbLPOjNvEAo36F2F4QJu6zLwoIf2I9KwkxKyCSuNxDpLmJmtU
    on:
      configuration: Release
# GitHub packages
  - provider: NuGet
    server: https://nuget.pkg.github.com/KeRNeLith/index.json
    username: KeRNeLith
    api_key:
      secure: 6N37NtnuKSzKQXlPOCtPSFJGOvJUdJjPK8LcuWx2PjHs2WVdngenZvYixk6br72b
    skip_symbols: true
    artifact: NuGet
    on:
      branch: master
      configuration: Release
      APPVEYOR_REPO_TAG: true
# NuGet
  - provider: NuGet
    api_key:
      secure: a/0jxqKB5mP/ED1AIQ6YxAoiYZP93M5NQpyZbq40Tkzg+ye0MhFHlDQFBUefrseY
    on:
      #branch: master
      configuration: Release
      #APPVEYOR_REPO_TAG: true
# GitHub
  - provider: GitHub
    auth_token:
      secure: fLTTmcGOM55kigJC4vErpObFmybCtzQtwb4QN55BTNq3GDGaOCoHDoIPxexzO59d
#    release: 'Test'
    description: 'Version ${Release_Name}'
    artifact: NuGet, Samples
    draft: false
    prerelease: false
    force_update: true
    on:
      branch: master
      configuration: Release
      #APPVEYOR_REPO_TAG: true
  # - provider: NuGet
    # server: https://nuget.pkg.github.com/KeRNeLith/index.json
    # username: KeRNeLith
    # api_key:
      # secure: 6N37NtnuKSzKQXlPOCtPSFJGOvJUdJjPK8LcuWx2PjHs2WVdngenZvYixk6br72b

# Deploy
# deploy:
  # - provider: NuGet
    # server: https://www.myget.org/F/kernelith-ci/api/v2/package
    # api_key:
      # secure: ANF+joC2B+NahxCFbLPOjNvEAo36F2F4QJu6zLwoIf2I9KwkxKyCSuNxDpLmJmtU
    # skip_symbols: true
    # on:
      # configuration: Release
  # - provider: NuGet
    # api_key:
      # secure: a/0jxqKB5mP/ED1AIQ6YxAoiYZP93M5NQpyZbq40Tkzg+ye0MhFHlDQFBUefrseY
    # on:
      # branch: master
      # configuration: Release
# #      APPVEYOR_REPO_TAG: true
  # - provider: GitHub    
    # auth_token: 
      # secure: fLTTmcGOM55kigJC4vErpObFmybCtzQtwb4QN55BTNq3GDGaOCoHDoIPxexzO59d
    # release: '${Build_Version}'
    # description: 'Version ${Build_Version}'
    # artifact: NuGet
    # draft: false
    # prerelease: false
    # force_update: true
    # on:
      # branch: master
      # configuration: Release
      #APPVEYOR_REPO_TAG: true